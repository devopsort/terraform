
Pre requisitos:
aws cli
kubectl
argocd cli



aws eks --region us-east-1 update-kubeconfig --name eks-cluster-dev
 
https://releases.hashicorp.com/terraform/1.0.11/terraform_1.0.11_linux_amd64.zip


#Para instalr el dashboard:
kubectl apply -f https://gist.githubusercontent.com/mauricioamendola/abe42453184c42a401a1d170824deab0/raw/eabc8334575df8aa3452462e3f497128f59d98fc/k8s-dash-sa-rbac
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.2.0/aio/deploy/recommended.yaml
kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep eks-admin | awk '{print $1}')
kubectl proxy
Entrar:
http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#!/login


Para instalar ArgoCD:
https://argo-cd.readthedocs.io/en/stable/getting_started/



Pasos a ejecutar para dejar ArgoCD:
kubectl create namespace argocd
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/core-install.yaml

Para ver el servicio:
kubectl port-forward svc/argocd-server -n argocd 8080:443

Ob tener el pass para el primer acceso:
kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d


argocd app create dashboard --repo https://raw.githubusercontent.com/kubernetes/dashboard/v2.2.0/aio/deploy/recommended.yaml  --dest-server https://kubernetes.default.svc --dest-namespace kubernetes-dashboard

export ARGOCD_SERVER=`kubectl get svc argocd-server -n argocd -o json | jq --raw-output '.status.loadBalancer.ingress[0].hostname'`

Como quedo en argo el YAML del dashboard:
----------------------------------------------------------------------
project: default
source:
  repoURL: 'https://github.com/kubernetes/dashboard.git'
  path: aio/deploy/helm-chart/kubernetes-dashboard
  targetRevision: HEAD
destination:
  server: 'https://kubernetes.default.svc'
  namespace: kubernetes-dashboard
----------------------------------------------------------------------

chmod 400 keyssh-EC2-prueba-insite.pem 



ArgoCD Login consola

sudo curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
sudo chmod +x /usr/local/bin/argocd

sudo yum install -y jq
kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
sleep 120
export ARGOCD_SERVER=`kubectl get svc argocd-server -n argocd -o json | jq --raw-output '.status.loadBalancer.ingress[0].hostname'`
echo $ARGOCD_SERVER
export ARGO_PWD=`kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d`
echo $ARGO_PWD
argocd login $ARGOCD_SERVER --username admin --password $ARGO_PWD --insecure

argocd app create dashboard --repo https://github.com/kubernetes/dashboard.git --path aio/deploy/helm-chart/kubernetes-dashboard --dest-namespace kubernetes-dashboard --dest-server https://kubernetes.default.svc
argocd app sync dashboard


      #Para el provisioner ejecutar los deployment
      "argocd app create dashboard --repo https://github.com/kubernetes/dashboard.git --path aio/deploy/helm-chart/kubernetes-dashboard --dest-namespace kubernetes-dashboard --nameprefix --dest-server https://kubernetes.default.svc",
      "argocd app sync dashboard",
      "sleep 10",
      "argocd app sync dashboard"

--sync-policy auto



ssh-copy-id -f "-o IdentityFile ec2-keypair.pem" ubuntu@XXXX.compute-1.amazonaws.com



      "argocd app create ms-product2 --repo https://github.com/devopsort/argocd_products-service-example.git --revision Test --path ./ --dest-namespace default --sync-policy auto --dest-server https://kubernetes.default.svc",
      "argocd app sync ms-product",


argocd app create ms-product --repo https://github.com/devopsort/argocd_products-service-example.git --revision Test --dest-namespace default --sync-policy auto --dest-server https://kubernetes.default.svc
